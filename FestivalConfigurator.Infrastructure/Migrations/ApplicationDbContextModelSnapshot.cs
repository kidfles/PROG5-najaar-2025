// <auto-generated />
using System;
using FestivalConfigurator.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FestivalConfigurator.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FestivalConfigurator.Domain.Festival", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasicPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Logo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Festivals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasicPrice = 199.00m,
                            Description = "Three-day music festival.",
                            EndDate = new DateOnly(2025, 8, 24),
                            Name = "Lowlands",
                            Place = "Biddinghuizen",
                            StartDate = new DateOnly(2025, 8, 22)
                        });
                });

            modelBuilder.Entity("FestivalConfigurator.Domain.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ItemType = 0,
                            Name = "Campingspot Small",
                            Price = 25m
                        },
                        new
                        {
                            Id = 2,
                            ItemType = 0,
                            Name = "Campingspot Large",
                            Price = 40m
                        },
                        new
                        {
                            Id = 3,
                            ItemType = 0,
                            Name = "Glamping Upgrade",
                            Price = 120m
                        },
                        new
                        {
                            Id = 4,
                            ItemType = 1,
                            Name = "Meal Voucher",
                            Price = 12.5m
                        },
                        new
                        {
                            Id = 5,
                            ItemType = 1,
                            Name = "Drink Pack",
                            Price = 15m
                        },
                        new
                        {
                            Id = 6,
                            ItemType = 1,
                            Name = "Breakfast",
                            Price = 9.5m
                        },
                        new
                        {
                            Id = 7,
                            ItemType = 2,
                            Name = "Parking Day",
                            Price = 10m
                        },
                        new
                        {
                            Id = 8,
                            ItemType = 2,
                            Name = "Parking Weekend",
                            Price = 25m
                        },
                        new
                        {
                            Id = 9,
                            ItemType = 2,
                            Name = "VIP Parking",
                            Price = 50m
                        },
                        new
                        {
                            Id = 10,
                            ItemType = 3,
                            Name = "T-Shirt",
                            Price = 30m
                        },
                        new
                        {
                            Id = 11,
                            ItemType = 3,
                            Name = "Hoodie",
                            Price = 55m
                        },
                        new
                        {
                            Id = 12,
                            ItemType = 3,
                            Name = "Poster",
                            Price = 12m
                        },
                        new
                        {
                            Id = 13,
                            ItemType = 4,
                            Name = "VIP Day",
                            Price = 80m
                        },
                        new
                        {
                            Id = 14,
                            ItemType = 4,
                            Name = "VIP Weekend",
                            Price = 200m
                        },
                        new
                        {
                            Id = 15,
                            ItemType = 4,
                            Name = "Backstage Tour",
                            Price = 150m
                        },
                        new
                        {
                            Id = 16,
                            ItemType = 5,
                            Name = "Locker",
                            Price = 15m
                        },
                        new
                        {
                            Id = 17,
                            ItemType = 5,
                            Name = "Powerbank Rental",
                            Price = 8m
                        },
                        new
                        {
                            Id = 18,
                            ItemType = 5,
                            Name = "Rain Poncho",
                            Price = 5m
                        });
                });

            modelBuilder.Entity("FestivalConfigurator.Domain.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FestivalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("FestivalId");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FestivalId = 1,
                            Name = "Weekend Basic"
                        },
                        new
                        {
                            Id = 2,
                            FestivalId = 1,
                            Name = "Weekend Plus"
                        });
                });

            modelBuilder.Entity("FestivalConfigurator.Domain.PackageItem", b =>
                {
                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PackageId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("PackageItems");
                });

            modelBuilder.Entity("FestivalConfigurator.Domain.Package", b =>
                {
                    b.HasOne("FestivalConfigurator.Domain.Festival", "Festival")
                        .WithMany("Packages")
                        .HasForeignKey("FestivalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Festival");
                });

            modelBuilder.Entity("FestivalConfigurator.Domain.PackageItem", b =>
                {
                    b.HasOne("FestivalConfigurator.Domain.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FestivalConfigurator.Domain.Package", "Package")
                        .WithMany("PackageItems")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("FestivalConfigurator.Domain.Festival", b =>
                {
                    b.Navigation("Packages");
                });

            modelBuilder.Entity("FestivalConfigurator.Domain.Package", b =>
                {
                    b.Navigation("PackageItems");
                });
#pragma warning restore 612, 618
        }
    }
}
